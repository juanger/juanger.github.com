<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cocoa | Ruby Xocolatl]]></title>
  <link href="http://blog.juanger.com/blog/categories/cocoa/atom.xml" rel="self"/>
  <link href="http://blog.juanger.com/"/>
  <updated>2013-06-02T14:30:40-07:00</updated>
  <id>http://blog.juanger.com/</id>
  <author>
    <name><![CDATA[Juan Castaneda]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Screencast with RubyCocoa]]></title>
    <link href="http://blog.juanger.com/blog/2008/11/screencast-with-rubycocoa/"/>
    <updated>2008-11-12T00:00:00-08:00</updated>
    <id>http://blog.juanger.com/blog/2008/11/screencast-with-rubycocoa</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I know I promised a screencast about Lucecita, but that will be in the Holydays, now I post a little code that captures the screen and creates a video.</p><p>The not so good thing is that the frame rate isn't controlled by my code and it is very slow, but maybe with MacRuby and some threads we could make that code very fast and even parallelize the capturing and the creation of the movie (the other option is to use Objective-C) but MacRuby is under development and it doesn't have all the things we need.</p><p>What do you think? Can we improve it with a ruby/cocoa hack?</p><p>Leave any idea or comment, the code is in the full post:</p><span id="fullpost">  <br />
<br />
<script src="http://gist.github.com/489722.js"> </script><br />
<br />
</span></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacRuby]]></title>
    <link href="http://blog.juanger.com/blog/2008/03/macruby/"/>
    <updated>2008-03-08T00:00:00-08:00</updated>
    <id>http://blog.juanger.com/blog/2008/03/macruby</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="text-align: justify;">Some days ago I found the MacRuby project and it seems it will bring a lot of new things to ruby+cocoa programming. And as I've been reading and writing some RubyCocoa apps in the last months I want to share the joy it gave me.
</div><div><div style="text-align: justify;">
</div><div> </div><div> </div><div style="text-align: justify;">First of all, it will use the new YARV interpreter that was released with the 1.9 version of ruby last christmas which is faster than the so called MRV(the "M" is for Matz), also, it doesn't use the ruby garbage collector, but the cocoa one. This allows the programs to not stop while the garbage collector is running cause the cocoa garbage collector runs in another thread.</div><div style="text-align: justify;">
</div><div> </div><div> </div><div style="text-align: justify;">Speaking of threads, another feature of the new ruby 1.9 is that it allows users to use POSIX threads(cool!). </div><div style="text-align: justify;">
</div><div style="text-align: justify;">Another cool feature are named parameters are also useful when calling methods, the message style when calling an object's "method" of Objective-C looks like: </div>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSAlert</span> <span class="o">*</span><span class="n">alert</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSAlert</span> <span class="nl">alertWithMessageText:</span> <span class="s">@&quot;What?&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nl">defaultButton:</span> <span class="s">@&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nl">alternateButton:</span> <span class="s">@&quot;Cancel&quot;</span><span class="p">,</span>
</span><span class='line'><span class="nl">otherButton:</span> <span class="nb">nil</span><span class="p">,</span>
</span><span class='line'><span class="nl">informativeTextWithFormat:</span> <span class="s">@&quot;I am an alert!&quot;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</pre>
<div><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">And the MacRuby counterpart:</span></span></div>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">alert</span> <span class="o">=</span> <span class="no">NSAlert</span><span class="o">.</span><span class="n">alertWithMessageText</span><span class="p">(</span><span class="s2">&quot;What?&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">defaultButton</span><span class="p">:</span> <span class="s2">&quot;OK&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">alternateButton</span><span class="p">:</span> <span class="s2">&quot;Cancel&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">otherButton</span><span class="p">:</span> <span class="kp">nil</span><span class="p">,</span>
</span><span class='line'><span class="n">informativeTextWithFormat</span><span class="p">:</span> <span class="s2">&quot;I am an alert!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<div><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">Isn't that sexy?? No more big method names:</span></span></div><div><span class="Apple-style-span"  style="font-family:'times new roman';">
</span></div>
<pre class="prettyprint">
alertWithMessageText_defaultButton_alternateButton_otherButton_informativeTextWithFormat
</pre>
<div style="text-align: justify;"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">The last beautiful thing I am going to comment about are ruby hashes inheriting from NSDictionary. That's cool because you can pass a ruby hash to methods that need an NSDictionary instead of constructing one in the cocoa way.</span></span></div><div style="text-align: justify;"><span class="Apple-style-span"  style="font-size:medium;">
</span></div><div style="text-align: justify;"><span class="Apple-style-span"  style="font-family:'times new roman';"><span class="Apple-style-span"  style="font-size:medium;">The bad things: MacRuby is under development, it needs Leopard and only runs on Intel Macs. But looks promising.</span></span></div><div><span class="Apple-style-span"  style="font-family:'courier new';">
</span></div><div>
</div><div>
</div></div></div>

]]></content>
  </entry>
  
</feed>
