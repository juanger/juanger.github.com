{"pageProps":{"title":"Lucecita: RubyCocoa example","contents":"<p><span style=\"font-weight:bold;\">UPDATE:</span> Version 2.0 of Lucecita is out. <a href=\"http://blog.juanger.com/2008/10/lucecita-20.html\">Lucecita 2.0</a></p>\n\n<p>There are some applications like Mousepos√©, OmniDazzle or RemoteBuddy that allow you to have a rally nice light effect with your mouse. But as I have stated before, I am a poor student :) and since  I am saving money to buy a new laptop(by the way, please support me with the ads and with donations!!) I have written a little app called \"Lucecita\". For the impatient: <a href=\"http://juanger.googlepages.com/Lucecita.zip\">Lucecita.app</a>.</p>\n\n<p>\n  <img style=\"display:block; margin:0px auto 10px; text-align:center;cursor:pointer; cursor:hand;\" src=\"http://bp1.blogger.com/\\_WeoTLD0cYR0/SIqywKYJFoI/AAAAAAAAAB0/SIHWBCG1acA/s400/LucecitaInAction.png\" border=\"0\" alt=\"\" id=\"BLOGGER_PHOTO_ID_5227186858005960322\" />\n</p>\n\n<h3>DarkWindow.rb</h3>\n\n<pre><code class=\"language-ruby\">require &#39;osx/cocoa&#39;\ninclude OSX\n\nclass DarkWindow &lt; NSWindow\n\n  def initWithContentRect_styleMask_backing_defer(contentRect, aStyle, bufferingType, flag)\n    result = super_initWithContentRect_styleMask_backing_defer(NSScreen.mainScreen.frame,\n                  NSBorderlessWindowMask,\n                  bufferingType,\n                  flag)\n    if result\n      result.setBackgroundColor(NSColor.clearColor)\n      result.setOpaque(false)\n      result.setIgnoresMouseEvents(true)\n      result.setLevel(NSScreenSaverWindowLevel)\n      result.setCollectionBehavior(NSWindowCollectionBehaviorCanJoinAllSpaces)\n    end\n\n    result\n  end\n\nend</code></pre>\n<h3>LightView.rb</h3>\n\n<pre><code class=\"language-ruby\">require &#39;osx/cocoa&#39;\ninclude OSX\n\nclass LuzView &lt;  OSX::NSView\n\n  attr_accessor :center, :rect, :radius, :transparency, :enabled\n\n  def initialize\n    @radius = 50\n    @transparency = 0.5\n    @enabled = false\n  end\n\n  def initWithFrame(frame)\n    self.setNeedsDisplay true\n    return self\n  end\n\n  def drawRect(rect)\n    if @enabled\n    NSGraphicsContext.currentContext.setCompositingOperation NSCompositeSourceOut\n    context = NSGraphicsContext.currentContext.graphicsPort\n    @center = NSEvent.mouseLocation\n    CGContextSetRGBFillColor(context, 0.0, 0.0, 0.0, @transparency)\n    CGContextFillRect(context, rect)\n\n    drawLight\n    end\n  end\n\n  def drawLight\n    context = NSGraphicsContext.currentContext.graphicsPort\n    NSColor.colorWithCalibratedRed_green_blue_alpha(1.0,1.0,1.0,0.0).set\n\n    CGContextSetGrayStrokeColor(context, 0, 1)\n    CGContextSetLineWidth(context, 0)\n\n    @rect = NSRect.new(@center.x - @radius, @center.y - @radius, @radius*2, @radius*2)\n    CGContextAddEllipseInRect(context, @rect)\n    CGContextDrawPath(context, KCGPathFill)\n  end\n\nend</code></pre>\n<h3>LightController.rb</h3>\n\n<pre><code class=\"language-ruby\">require &#39;osx/cocoa&#39;\n\nclass LuzController &lt; OSX::NSObject\n\n  ib_outlets :luz_view\n  ib_outlets :menu, :size, :size_lbl, :alpha, :alpha_lbl, :enabled\n\n  def awakeFromNib\n    activateStatusMenu()\n    @callback = lambda { |p,t,e,r|\n      if (t == KCGEventOtherMouseDown &amp;&amp;\n        CGEventGetFlags(e) &amp; KCGEventFlagMaskControl == KCGEventFlagMaskControl)\n        toggle(self)\n        return\n      end\n      if @luz_view.enabled\n        @luz_view.center = CGEventGetLocation(e)\n        @luz_view.setNeedsDisplayInRect NSInsetRect(@luz_view.rect, -30, -30)\n      end\n      e\n    }\n    start_tapping()\n  end\n\n  ib_action :change_alpha do |sender|\n    @luz_view.transparency = @alpha.floatValue\n    @alpha_lbl.setStringValue &quot;#{(@alpha.floatValue*100).to_i}%&quot;\n    @luz_view.setNeedsDisplay true\n  end\n\n  ib_action :change_size do |sender|\n    @luz_view.radius = @size.floatValue\n    @size_lbl.setStringValue &quot;#{(@size.intValue)}px&quot;\n    @luz_view.setNeedsDisplay true\n  end\n\n  ib_action :toggle do |sender|\n    @luz_view.enabled = !@luz_view.enabled\n    @enabled.setState(@luz_view.enabled ? 1 : 0)\n    @luz_view.setNeedsDisplay true\n  end\n\n  def activateStatusMenu()\n      statusItem = NSStatusBar.systemStatusBar.statusItemWithLength(NSVariableStatusItemLength)\n      statusItem.retain\n      icon = NSImage.alloc.initWithContentsOfFile(&quot;#{NSBundle.mainBundle.resourcePath}/Lucecita.png&quot;)\n      statusItem.setImage icon\n      statusItem.setHighlightMode true\n      statusItem.setMenu @menu\n  end\n\n  def start_tapping\n    eventMask = 167772384 # Magic Number: LeftMouseDragged MouseMoved RightMouseDragged OtherMouseDragged OtherMouseDown\n    eventTap = CGEventTapCreate(KCGSessionEventTap, KCGHeadInsertEventTap,\n                                0, eventMask, @callback, nil)\n    eventSrc = CFMachPortCreateRunLoopSource(nil, eventTap, 0)\n    CFRelease(eventTap)\n    CFRunLoopAddSource(CFRunLoopGetCurrent(),  eventSrc, KCFRunLoopCommonModes)\n    CFRelease(eventSrc)\n  end\n\n  def applicationShouldTerminate\n    CFRunLoopRemoveSource(CFRunLoopGetCurrent(), mEventSrc, KCFRunLoopCommonModes)\n  end\n\nend</code></pre>\n<p>And the application is here: <a href=\"http://juanger.googlepages.com/Lucecita.zip\">Lucecita.app</a></p>\n\n<p>You can activate it with the menu or with ctrl-Button3Click or ctrl-Button4Click if you have a three button mouse or a Mighty Mouse.</p>\n\n<p>I am preparing a screencast to show yo how I coded it but that will be later, until then you can see inside the app package and check  the ruby code.</p>\n","categories":["ruby","Lucecita","code","RubyCocoa"],"comments":false,"date":"2008-07-25","year":"2008","month":"07","slug":"lucecita-rubycocoa-example","lang":"en","hasTranslation":false},"__N_SSG":true}