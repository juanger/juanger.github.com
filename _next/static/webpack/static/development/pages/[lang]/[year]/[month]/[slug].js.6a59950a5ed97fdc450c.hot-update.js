webpackHotUpdate("static/development/pages/[lang]/[year]/[month]/[slug].js",{

/***/ "./components/Layout.tsx":
/*!*******************************!*\
  !*** ./components/Layout.tsx ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Layout; });\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/head */ \"./node_modules/next/dist/next-server/lib/head.js\");\n/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"/Users/juanger/Projects/blog/components/Layout.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;\n\nfunction Layout(props) {\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx(next_head__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }\n  }, __jsx(\"script\", {\n    async: true,\n    src: \"https://www.googletagmanager.com/gtag/js?id=UA-3608240-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }\n  }), __jsx(\"script\", {\n    dangerouslySetInnerHTML: {\n      __html: \"\\n                window.dataLayer = window.dataLayer || [];\\n                function gtag(){window.dataLayer.push(arguments)}\\n                gtag(\\\"js\\\", new Date());\\n                gtag(\\\"config\\\", \\\"UA-3608240-2\\\");\\n            \"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 9\n    }\n  }), __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, \"Ruby Xocolatl\"), __jsx(\"link\", {\n    rel: \"icon\",\n    href: \"/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  })), __jsx(\"div\", {\n    className: \"jsx-1146918910\" + \" \" + \"page-layout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, props.children, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"2784478401\",\n    __self: this\n  }, \"@charset \\\"UTF-8\\\";html{font-size:14px;}body{width:87.5%;margin-left:auto;margin-right:auto;padding-left:12.5%;font-family:Palatino,\\\"Palatino Linotype\\\",\\\"Palatino LT STD\\\", \\\"Book Antiqua\\\",Georgia,serif;background-color:#fffff8;color:#111;max-width:1400px;counter-reset:sidenote-counter;}h1{font-weight:400;margin-top:4rem;margin-bottom:1.5rem;font-size:3.2rem;line-height:1;}h2{font-style:italic;font-weight:400;margin-top:2.1rem;margin-bottom:1.4rem;font-size:2.2rem;line-height:1;}h3{font-style:italic;font-weight:400;font-size:1.7rem;margin-top:2rem;margin-bottom:1.4rem;line-height:1;}hr{display:block;height:1px;width:55%;border:0;border-top:1px solid #ccc;margin:1em 0;padding:0;}p.subtitle{font-style:italic;margin-top:1rem;margin-bottom:1rem;font-size:1.8rem;display:block;line-height:1;}.numeral{font-family:et-book-roman-old-style;}.danger{color:red;}article{position:relative;padding:5rem 0rem;}section{padding-top:1rem;padding-bottom:1rem;}p,ol,ul{font-size:1.4rem;line-height:2rem;}p{margin-top:1.4rem;margin-bottom:1.4rem;padding-right:0;vertical-align:baseline;}div.epigraph{margin:5em 0;}div.epigraph>blockquote{margin-top:3em;margin-bottom:3em;}div.epigraph>blockquote,div.epigraph>blockquote>p{font-style:italic;}div.epigraph>blockquote>footer{font-style:normal;}div.epigraph>blockquote>footer>cite{font-style:italic;}blockquote{font-size:1.4rem;}blockquote p{width:55%;margin-right:40px;}blockquote footer{width:55%;font-size:1.1rem;text-align:right;}section>p,section>footer,section>table{width:55%;}section>ol,section>ul{width:50%;-webkit-padding-start:5%;}li:not(:first-child){margin-top:0.25rem;}figure{padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline;max-width:55%;-webkit-margin-start:0;-webkit-margin-end:0;margin:0 0 3em 0;}figcaption{float:right;clear:right;margin-top:0;margin-bottom:0;font-size:1.1rem;line-height:1.6;vertical-align:baseline;position:relative;max-width:40%;}figure.fullwidth figcaption{margin-right:24%;}a:link,a:visited{color:inherit;}a:link{-webkit-text-decoration:none;text-decoration:none;background:-webkit-linear-gradient(#fffff8,#fffff8), -webkit-linear-gradient(#fffff8,#fffff8), -webkit-linear-gradient(#333,#333);background:linear-gradient(#fffff8,#fffff8), linear-gradient(#fffff8,#fffff8),linear-gradient(#333,#333);-webkit-background-size:0.05em 1px,0.05em 1px,1px 1px;-moz-background-size:0.05em 1px,0.05em 1px,1px 1px;background-size:0.05em 1px,0.05em 1px,1px 1px;background-repeat:no-repeat,no-repeat,repeat-x;text-shadow:0.03em 0 #fffff8,-0.03em 0 #fffff8,0 0.03em #fffff8, 0 -0.03em #fffff8,0.06em 0 #fffff8,-0.06em 0 #fffff8, 0.09em 0 #fffff8,-0.09em 0 #fffff8,0.12em 0 #fffff8, -0.12em 0 #fffff8,0.15em 0 #fffff8,-0.15em 0 #fffff8;background-position:0% 93%,100% 93%,0% 93%;}@media screen and (-webkit-min-device-pixel-ratio:0){a:link{background-position-y:87%,87%,87%;}}a:link::selection{text-shadow:0.03em 0 #b4d5fe,-0.03em 0 #b4d5fe,0 0.03em #b4d5fe, 0 -0.03em #b4d5fe,0.06em 0 #b4d5fe,-0.06em 0 #b4d5fe, 0.09em 0 #b4d5fe,-0.09em 0 #b4d5fe,0.12em 0 #b4d5fe, -0.12em 0 #b4d5fe,0.15em 0 #b4d5fe,-0.15em 0 #b4d5fe;background:#b4d5fe;}a:link::-moz-selection{text-shadow:0.03em 0 #b4d5fe,-0.03em 0 #b4d5fe,0 0.03em #b4d5fe, 0 -0.03em #b4d5fe,0.06em 0 #b4d5fe,-0.06em 0 #b4d5fe, 0.09em 0 #b4d5fe,-0.09em 0 #b4d5fe,0.12em 0 #b4d5fe, -0.12em 0 #b4d5fe,0.15em 0 #b4d5fe,-0.15em 0 #b4d5fe;background:#b4d5fe;}img{max-width:100%;}.sidenote,.marginnote{float:right;clear:right;margin-right:-60%;width:50%;margin-top:0;margin-bottom:0;font-size:1.1rem;line-height:1.3;vertical-align:baseline;position:relative;}.sidenote-number{counter-increment:sidenote-counter;}.sidenote-number:after,.sidenote:before{font-family:et-book-roman-old-style;position:relative;vertical-align:baseline;}.sidenote-number:after{content:counter(sidenote-counter);font-size:1rem;top:-0.5rem;left:0.1rem;}.sidenote:before{content:counter(sidenote-counter) \\\" \\\";font-size:1rem;top:-0.5rem;}blockquote .sidenote,blockquote .marginnote{margin-right:-82%;min-width:59%;text-align:left;}div.fullwidth,table.fullwidth{width:100%;}div.table-wrapper{overflow-x:auto;font-family:\\\"Trebuchet MS\\\",\\\"Gill Sans\\\",\\\"Gill Sans MT\\\",sans-serif;}.sans{font-family:\\\"Gill Sans\\\",\\\"Gill Sans MT\\\",Calibri,sans-serif;-webkit-letter-spacing:0.03em;-moz-letter-spacing:0.03em;-ms-letter-spacing:0.03em;letter-spacing:0.03em;}code{font-family:Consolas,\\\"Liberation Mono\\\",Menlo,Courier,monospace;font-size:1rem;line-height:1.42;}.sans>code{font-size:1.2rem;}h1>code,h2>code,h3>code{font-size:0.8em;}.marginnote>code,.sidenote>code{font-size:1rem;}pre.code{font-size:0.9rem;width:52.5%;margin-left:2.5%;overflow-x:auto;}pre.code.fullwidth{width:90%;}article p{max-width:90%;clear:both;}.fullwidth{max-width:90%;clear:both;}span.newthought{font-variant:small-caps;font-size:1.2em;}input.margin-toggle{display:none;}label.sidenote-number{display:inline;}label.margin-toggle:not(.sidenote-number){display:none;}.iframe-wrapper{position:relative;padding-bottom:56.25%;padding-top:25px;height:0;}.iframe-wrapper iframe{position:absolute;top:0;left:0;width:100%;height:100%;}@media (max-width:760px){body{width:84%;padding-left:8%;padding-right:8%;}hr,section>p,section>footer,section>table{width:100%;}pre.code{width:97%;}section>ol{width:90%;}section>ul{width:90%;}figure{max-width:90%;}figcaption,figure.fullwidth figcaption{margin-right:0%;max-width:none;}blockquote{margin-left:1.5em;margin-right:0em;}blockquote p,blockquote footer{width:100%;}label.margin-toggle:not(.sidenote-number){display:inline;}.sidenote,.marginnote{display:none;}.margin-toggle:checked+.sidenote,.margin-toggle:checked+.marginnote{display:block;float:left;left:1rem;clear:both;width:95%;margin:1rem 2.5%;vertical-align:baseline;position:relative;}label{cursor:pointer;}div.table-wrapper,table{width:85%;}img{width:100%;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/Users/juanger/Projects/blog/components/Layout.tsx */\"), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"2525546966\",\n    __self: this\n  }, \"#blog-name{color:#dc322f;}@media (max-width:760px){article{padding:1em 0em;}}#TOC ol{width:auto;list-style-type:none;}.fullwidth hr{width:100%;}body{-webkit-font-smoothing:antialiased;}a:link{background-position-y:100%;}a:hover{background-size:1px 1px,1px 1px,1px 3px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qdWFuZ2VyL1Byb2plY3RzL2Jsb2cvY29tcG9uZW50cy9MYXlvdXQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1kMkIsQUFHMkIsQUFLSSxBQUtQLEFBS0EsQUFJd0IsQUFJUixBQUllLFdBaEJyQixBQUt2QixHQWZBLEVBS0UsV0FrQkYsS0FaQSxHQVFBLEtBUUEiLCJmaWxlIjoiL1VzZXJzL2p1YW5nZXIvUHJvamVjdHMvYmxvZy9jb21wb25lbnRzL0xheW91dC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSGVhZCBmcm9tIFwibmV4dC9oZWFkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIExheW91dChwcm9wcykge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8SGVhZD5cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGFzeW5jXG4gICAgICAgICAgc3JjPVwiaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcz9pZD1VQS0zNjA4MjQwLTJcIlxuICAgICAgICA+PC9zY3JpcHQ+XG5cbiAgICAgICAgPHNjcmlwdFxuICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XG4gICAgICAgICAgICBfX2h0bWw6IGBcbiAgICAgICAgICAgICAgICB3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBndGFnKCl7d2luZG93LmRhdGFMYXllci5wdXNoKGFyZ3VtZW50cyl9XG4gICAgICAgICAgICAgICAgZ3RhZyhcImpzXCIsIG5ldyBEYXRlKCkpO1xuICAgICAgICAgICAgICAgIGd0YWcoXCJjb25maWdcIiwgXCJVQS0zNjA4MjQwLTJcIik7XG4gICAgICAgICAgICBgLFxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG5cbiAgICAgICAgPHRpdGxlPlJ1YnkgWG9jb2xhdGw8L3RpdGxlPlxuICAgICAgICA8bGluayByZWw9XCJpY29uXCIgaHJlZj1cIi9mYXZpY29uLmljb1wiIC8+XG4gICAgICA8L0hlYWQ+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInBhZ2UtbGF5b3V0XCI+XG4gICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cbiAgICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+e2BcbiAgICAgICAgICAvLyBGUk9NOiBodHRwczovL2dpdGh1Yi5jb20vZWR3YXJkdHVmdGUvdHVmdGUtY3NzL2Jsb2IvZ2gtcGFnZXMvdHVmdGUuY3NzXG5cbiAgICAgICAgICBAY2hhcnNldCBcIlVURi04XCI7XG5cbiAgICAgICAgICAvKiBJbXBvcnQgRVQgQm9vayBzdHlsZXNcbiAgICAgICAgICAgYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lZHdhcmR0dWZ0ZS9ldC1ib29rL2Jsb2IvZ2gtcGFnZXMvZXQtYm9vay5jc3MgKi9cblxuICAgICAgICAgIC8qIFR1ZnRlIENTUyBzdHlsZXMgKi9cbiAgICAgICAgICBodG1sIHtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib2R5IHtcbiAgICAgICAgICAgIHdpZHRoOiA4Ny41JTtcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAxMi41JTtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBQYWxhdGlubywgXCJQYWxhdGlubyBMaW5vdHlwZVwiLCBcIlBhbGF0aW5vIExUIFNURFwiLFxuICAgICAgICAgICAgICBcIkJvb2sgQW50aXF1YVwiLCBHZW9yZ2lhLCBzZXJpZjtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZjg7XG4gICAgICAgICAgICBjb2xvcjogIzExMTtcbiAgICAgICAgICAgIG1heC13aWR0aDogMTQwMHB4O1xuICAgICAgICAgICAgY291bnRlci1yZXNldDogc2lkZW5vdGUtY291bnRlcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBoMSB7XG4gICAgICAgICAgICBmb250LXdlaWdodDogNDAwO1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogNHJlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNXJlbTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMy4ycmVtO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaDIge1xuICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDIuMXJlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNHJlbTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMi4ycmVtO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaDMge1xuICAgICAgICAgICAgZm9udC1zdHlsZTogaXRhbGljO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS43cmVtO1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMnJlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNHJlbTtcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGhyIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgICAgaGVpZ2h0OiAxcHg7XG4gICAgICAgICAgICB3aWR0aDogNTUlO1xuICAgICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gICAgICAgICAgICBtYXJnaW46IDFlbSAwO1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwLnN1YnRpdGxlIHtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxcmVtO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjhyZW07XG4gICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5udW1lcmFsIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBldC1ib29rLXJvbWFuLW9sZC1zdHlsZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuZGFuZ2VyIHtcbiAgICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXJ0aWNsZSB7XG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgICAgICBwYWRkaW5nOiA1cmVtIDByZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VjdGlvbiB7XG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMXJlbTtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxcmVtO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHAsXG4gICAgICAgICAgb2wsXG4gICAgICAgICAgdWwge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMnJlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDEuNHJlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEuNHJlbTtcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogQ2hhcHRlciBFcGlncmFwaHMgKi9cbiAgICAgICAgICBkaXYuZXBpZ3JhcGgge1xuICAgICAgICAgICAgbWFyZ2luOiA1ZW0gMDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXYuZXBpZ3JhcGggPiBibG9ja3F1b3RlIHtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDNlbTtcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDNlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXYuZXBpZ3JhcGggPiBibG9ja3F1b3RlLFxuICAgICAgICAgIGRpdi5lcGlncmFwaCA+IGJsb2NrcXVvdGUgPiBwIHtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXYuZXBpZ3JhcGggPiBibG9ja3F1b3RlID4gZm9vdGVyIHtcbiAgICAgICAgICAgIGZvbnQtc3R5bGU6IG5vcm1hbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXYuZXBpZ3JhcGggPiBibG9ja3F1b3RlID4gZm9vdGVyID4gY2l0ZSB7XG4gICAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8qIGVuZCBjaGFwdGVyIGVwaWdyYXBocyBzdHlsZXMgKi9cblxuICAgICAgICAgIGJsb2NrcXVvdGUge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjRyZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmxvY2txdW90ZSBwIHtcbiAgICAgICAgICAgIHdpZHRoOiA1NSU7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDQwcHg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmxvY2txdW90ZSBmb290ZXIge1xuICAgICAgICAgICAgd2lkdGg6IDU1JTtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VjdGlvbiA+IHAsXG4gICAgICAgICAgc2VjdGlvbiA+IGZvb3RlcixcbiAgICAgICAgICBzZWN0aW9uID4gdGFibGUge1xuICAgICAgICAgICAgd2lkdGg6IDU1JTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiA1MCArIDUgPT0gNTUsIHRvIGJlIHRoZSBzYW1lIHdpZHRoIGFzIHBhcmFncmFwaCAqL1xuICAgICAgICAgIHNlY3Rpb24gPiBvbCxcbiAgICAgICAgICBzZWN0aW9uID4gdWwge1xuICAgICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICAgIC13ZWJraXQtcGFkZGluZy1zdGFydDogNSU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGk6bm90KDpmaXJzdC1jaGlsZCkge1xuICAgICAgICAgICAgbWFyZ2luLXRvcDogMC4yNXJlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmaWd1cmUge1xuICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICAgICAgICAgIGZvbnQ6IGluaGVyaXQ7XG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDU1JTtcbiAgICAgICAgICAgIC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwO1xuICAgICAgICAgICAgLXdlYmtpdC1tYXJnaW4tZW5kOiAwO1xuICAgICAgICAgICAgbWFyZ2luOiAwIDAgM2VtIDA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmlnY2FwdGlvbiB7XG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICBjbGVhcjogcmlnaHQ7XG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMS4xcmVtO1xuICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNjtcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIG1heC13aWR0aDogNDAlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpZ3VyZS5mdWxsd2lkdGggZmlnY2FwdGlvbiB7XG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDI0JTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvKiBMaW5rczogcmVwbGljYXRlIHVuZGVybGluZSB0aGF0IGNsZWFycyBkZXNjZW5kZXJzICovXG4gICAgICAgICAgYTpsaW5rLFxuICAgICAgICAgIGE6dmlzaXRlZCB7XG4gICAgICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhOmxpbmsge1xuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgICAgICAgICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQoI2ZmZmZmOCwgI2ZmZmZmOCksXG4gICAgICAgICAgICAgIC13ZWJraXQtbGluZWFyLWdyYWRpZW50KCNmZmZmZjgsICNmZmZmZjgpLFxuICAgICAgICAgICAgICAtd2Via2l0LWxpbmVhci1ncmFkaWVudCgjMzMzLCAjMzMzKTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgjZmZmZmY4LCAjZmZmZmY4KSxcbiAgICAgICAgICAgICAgbGluZWFyLWdyYWRpZW50KCNmZmZmZjgsICNmZmZmZjgpLCBsaW5lYXItZ3JhZGllbnQoIzMzMywgIzMzMyk7XG4gICAgICAgICAgICAtd2Via2l0LWJhY2tncm91bmQtc2l6ZTogMC4wNWVtIDFweCwgMC4wNWVtIDFweCwgMXB4IDFweDtcbiAgICAgICAgICAgIC1tb3otYmFja2dyb3VuZC1zaXplOiAwLjA1ZW0gMXB4LCAwLjA1ZW0gMXB4LCAxcHggMXB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1zaXplOiAwLjA1ZW0gMXB4LCAwLjA1ZW0gMXB4LCAxcHggMXB4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdCwgbm8tcmVwZWF0LCByZXBlYXQteDtcbiAgICAgICAgICAgIHRleHQtc2hhZG93OiAwLjAzZW0gMCAjZmZmZmY4LCAtMC4wM2VtIDAgI2ZmZmZmOCwgMCAwLjAzZW0gI2ZmZmZmOCxcbiAgICAgICAgICAgICAgMCAtMC4wM2VtICNmZmZmZjgsIDAuMDZlbSAwICNmZmZmZjgsIC0wLjA2ZW0gMCAjZmZmZmY4LFxuICAgICAgICAgICAgICAwLjA5ZW0gMCAjZmZmZmY4LCAtMC4wOWVtIDAgI2ZmZmZmOCwgMC4xMmVtIDAgI2ZmZmZmOCxcbiAgICAgICAgICAgICAgLTAuMTJlbSAwICNmZmZmZjgsIDAuMTVlbSAwICNmZmZmZjgsIC0wLjE1ZW0gMCAjZmZmZmY4O1xuICAgICAgICAgICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgOTMlLCAxMDAlIDkzJSwgMCUgOTMlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDApIHtcbiAgICAgICAgICAgIGE6bGluayB7XG4gICAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb24teTogODclLCA4NyUsIDg3JTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhOmxpbms6OnNlbGVjdGlvbiB7XG4gICAgICAgICAgICB0ZXh0LXNoYWRvdzogMC4wM2VtIDAgI2I0ZDVmZSwgLTAuMDNlbSAwICNiNGQ1ZmUsIDAgMC4wM2VtICNiNGQ1ZmUsXG4gICAgICAgICAgICAgIDAgLTAuMDNlbSAjYjRkNWZlLCAwLjA2ZW0gMCAjYjRkNWZlLCAtMC4wNmVtIDAgI2I0ZDVmZSxcbiAgICAgICAgICAgICAgMC4wOWVtIDAgI2I0ZDVmZSwgLTAuMDllbSAwICNiNGQ1ZmUsIDAuMTJlbSAwICNiNGQ1ZmUsXG4gICAgICAgICAgICAgIC0wLjEyZW0gMCAjYjRkNWZlLCAwLjE1ZW0gMCAjYjRkNWZlLCAtMC4xNWVtIDAgI2I0ZDVmZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNiNGQ1ZmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYTpsaW5rOjotbW96LXNlbGVjdGlvbiB7XG4gICAgICAgICAgICB0ZXh0LXNoYWRvdzogMC4wM2VtIDAgI2I0ZDVmZSwgLTAuMDNlbSAwICNiNGQ1ZmUsIDAgMC4wM2VtICNiNGQ1ZmUsXG4gICAgICAgICAgICAgIDAgLTAuMDNlbSAjYjRkNWZlLCAwLjA2ZW0gMCAjYjRkNWZlLCAtMC4wNmVtIDAgI2I0ZDVmZSxcbiAgICAgICAgICAgICAgMC4wOWVtIDAgI2I0ZDVmZSwgLTAuMDllbSAwICNiNGQ1ZmUsIDAuMTJlbSAwICNiNGQ1ZmUsXG4gICAgICAgICAgICAgIC0wLjEyZW0gMCAjYjRkNWZlLCAwLjE1ZW0gMCAjYjRkNWZlLCAtMC4xNWVtIDAgI2I0ZDVmZTtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNiNGQ1ZmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLyogU2lkZW5vdGVzLCBtYXJnaW4gbm90ZXMsIGZpZ3VyZXMsIGNhcHRpb25zICovXG4gICAgICAgICAgaW1nIHtcbiAgICAgICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc2lkZW5vdGUsXG4gICAgICAgICAgLm1hcmdpbm5vdGUge1xuICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgICAgICAgY2xlYXI6IHJpZ2h0O1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAtNjAlO1xuICAgICAgICAgICAgd2lkdGg6IDUwJTtcbiAgICAgICAgICAgIG1hcmdpbi10b3A6IDA7XG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjFyZW07XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS4zO1xuICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5zaWRlbm90ZS1udW1iZXIge1xuICAgICAgICAgICAgY291bnRlci1pbmNyZW1lbnQ6IHNpZGVub3RlLWNvdW50ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLnNpZGVub3RlLW51bWJlcjphZnRlcixcbiAgICAgICAgICAuc2lkZW5vdGU6YmVmb3JlIHtcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiBldC1ib29rLXJvbWFuLW9sZC1zdHlsZTtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc2lkZW5vdGUtbnVtYmVyOmFmdGVyIHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IGNvdW50ZXIoc2lkZW5vdGUtY291bnRlcik7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICB0b3A6IC0wLjVyZW07XG4gICAgICAgICAgICBsZWZ0OiAwLjFyZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLnNpZGVub3RlOmJlZm9yZSB7XG4gICAgICAgICAgICBjb250ZW50OiBjb3VudGVyKHNpZGVub3RlLWNvdW50ZXIpIFwiIFwiO1xuICAgICAgICAgICAgZm9udC1zaXplOiAxcmVtO1xuICAgICAgICAgICAgdG9wOiAtMC41cmVtO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJsb2NrcXVvdGUgLnNpZGVub3RlLFxuICAgICAgICAgIGJsb2NrcXVvdGUgLm1hcmdpbm5vdGUge1xuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAtODIlO1xuICAgICAgICAgICAgbWluLXdpZHRoOiA1OSU7XG4gICAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpdi5mdWxsd2lkdGgsXG4gICAgICAgICAgdGFibGUuZnVsbHdpZHRoIHtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpdi50YWJsZS13cmFwcGVyIHtcbiAgICAgICAgICAgIG92ZXJmbG93LXg6IGF1dG87XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJUcmVidWNoZXQgTVNcIiwgXCJHaWxsIFNhbnNcIiwgXCJHaWxsIFNhbnMgTVRcIiwgc2Fucy1zZXJpZjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc2FucyB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogXCJHaWxsIFNhbnNcIiwgXCJHaWxsIFNhbnMgTVRcIiwgQ2FsaWJyaSwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAwLjAzZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29kZSB7XG4gICAgICAgICAgICBmb250LWZhbWlseTogQ29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIE1lbmxvLCBDb3VyaWVyLCBtb25vc3BhY2U7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgICBsaW5lLWhlaWdodDogMS40MjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAuc2FucyA+IGNvZGUge1xuICAgICAgICAgICAgZm9udC1zaXplOiAxLjJyZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaDEgPiBjb2RlLFxuICAgICAgICAgIGgyID4gY29kZSxcbiAgICAgICAgICBoMyA+IGNvZGUge1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAubWFyZ2lubm90ZSA+IGNvZGUsXG4gICAgICAgICAgLnNpZGVub3RlID4gY29kZSB7XG4gICAgICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJlLmNvZGUge1xuICAgICAgICAgICAgZm9udC1zaXplOiAwLjlyZW07XG4gICAgICAgICAgICB3aWR0aDogNTIuNSU7XG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMi41JTtcbiAgICAgICAgICAgIG92ZXJmbG93LXg6IGF1dG87XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcHJlLmNvZGUuZnVsbHdpZHRoIHtcbiAgICAgICAgICAgIHdpZHRoOiA5MCU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYXJ0aWNsZSBwIHtcbiAgICAgICAgICAgIG1heC13aWR0aDogOTAlO1xuICAgICAgICAgICAgY2xlYXI6IGJvdGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmZ1bGx3aWR0aCB7XG4gICAgICAgICAgICBtYXgtd2lkdGg6IDkwJTtcbiAgICAgICAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNwYW4ubmV3dGhvdWdodCB7XG4gICAgICAgICAgICBmb250LXZhcmlhbnQ6IHNtYWxsLWNhcHM7XG4gICAgICAgICAgICBmb250LXNpemU6IDEuMmVtO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlucHV0Lm1hcmdpbi10b2dnbGUge1xuICAgICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsYWJlbC5zaWRlbm90ZS1udW1iZXIge1xuICAgICAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxhYmVsLm1hcmdpbi10b2dnbGU6bm90KC5zaWRlbm90ZS1udW1iZXIpIHtcbiAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmlmcmFtZS13cmFwcGVyIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgIHBhZGRpbmctYm90dG9tOiA1Ni4yNSU7IC8qIDE2OjkgKi9cbiAgICAgICAgICAgIHBhZGRpbmctdG9wOiAyNXB4O1xuICAgICAgICAgICAgaGVpZ2h0OiAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5pZnJhbWUtd3JhcHBlciBpZnJhbWUge1xuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIEBtZWRpYSAobWF4LXdpZHRoOiA3NjBweCkge1xuICAgICAgICAgICAgYm9keSB7XG4gICAgICAgICAgICAgIHdpZHRoOiA4NCU7XG4gICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogOCU7XG4gICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDglO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHIsXG4gICAgICAgICAgICBzZWN0aW9uID4gcCxcbiAgICAgICAgICAgIHNlY3Rpb24gPiBmb290ZXIsXG4gICAgICAgICAgICBzZWN0aW9uID4gdGFibGUge1xuICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZS5jb2RlIHtcbiAgICAgICAgICAgICAgd2lkdGg6IDk3JTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlY3Rpb24gPiBvbCB7XG4gICAgICAgICAgICAgIHdpZHRoOiA5MCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWN0aW9uID4gdWwge1xuICAgICAgICAgICAgICB3aWR0aDogOTAlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlndXJlIHtcbiAgICAgICAgICAgICAgbWF4LXdpZHRoOiA5MCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaWdjYXB0aW9uLFxuICAgICAgICAgICAgZmlndXJlLmZ1bGx3aWR0aCBmaWdjYXB0aW9uIHtcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwJTtcbiAgICAgICAgICAgICAgbWF4LXdpZHRoOiBub25lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2txdW90ZSB7XG4gICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAxLjVlbTtcbiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwZW07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9ja3F1b3RlIHAsXG4gICAgICAgICAgICBibG9ja3F1b3RlIGZvb3RlciB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFiZWwubWFyZ2luLXRvZ2dsZTpub3QoLnNpZGVub3RlLW51bWJlcikge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAuc2lkZW5vdGUsXG4gICAgICAgICAgICAubWFyZ2lubm90ZSB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAubWFyZ2luLXRvZ2dsZTpjaGVja2VkICsgLnNpZGVub3RlLFxuICAgICAgICAgICAgLm1hcmdpbi10b2dnbGU6Y2hlY2tlZCArIC5tYXJnaW5ub3RlIHtcbiAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgICAgICAgICBsZWZ0OiAxcmVtO1xuICAgICAgICAgICAgICBjbGVhcjogYm90aDtcbiAgICAgICAgICAgICAgd2lkdGg6IDk1JTtcbiAgICAgICAgICAgICAgbWFyZ2luOiAxcmVtIDIuNSU7XG4gICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFiZWwge1xuICAgICAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXYudGFibGUtd3JhcHBlcixcbiAgICAgICAgICAgIHRhYmxlIHtcbiAgICAgICAgICAgICAgd2lkdGg6IDg1JTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGltZyB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgYH08L3N0eWxlPlxuXG4gICAgICAgIDxzdHlsZSBqc3ggZ2xvYmFsPntgXG4gICAgICAgICAgI2Jsb2ctbmFtZSB7XG4gICAgICAgICAgICBjb2xvcjogI2RjMzIyZjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBAbWVkaWEgKG1heC13aWR0aDogNzYwcHgpIHtcbiAgICAgICAgICAgIGFydGljbGUge1xuICAgICAgICAgICAgICBwYWRkaW5nOiAxZW0gMGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgICNUT0Mgb2wge1xuICAgICAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgICAgICAgICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLmZ1bGx3aWR0aCBociB7XG4gICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBib2R5IHtcbiAgICAgICAgICAgIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGE6bGluayB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uLXk6IDEwMCU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYTpob3ZlciB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDFweCAxcHgsIDFweCAxcHgsIDFweCAzcHg7XG4gICAgICAgICAgfVxuICAgICAgICBgfTwvc3R5bGU+XG4gICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cbiJdfQ== */\\n/*@ sourceURL=/Users/juanger/Projects/blog/components/Layout.tsx */\")));\n}\n_c = Layout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Layout\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports_1 = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports_1, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports_1)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports_1;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports_1)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Layout.tsx\n");

/***/ })

})